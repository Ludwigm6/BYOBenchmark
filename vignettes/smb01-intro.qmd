---
title: "smb - The Spatial Modelling Benchmark Dataset"
format: html
author: Marvin Ludwig
---

```{r setup}
library(terra)
library(sf)
# library(smb)

# vignette setup, can be removed once package is build

# source all package functions
lapply(list.files(path = "R/", full.names = TRUE, pattern = ".R$"), source)


# load needed package data
source("data-raw/create_sysdata.R")
```


## Study Area

The study area is Germany with a negative buffer of 10km. We do this to negate effects of the coastline, islands and borders. Every spatial variable is masked with this layer.

```{r}
terra::plot(raster_template)
```

The total amount of valid pixels is

```{r}
terra::values(raster_template) |> 
  sum(na.rm = TRUE)
```



## Environmental Data

With the package, you can download environmentally meaningful raster data, e.g. weather data from the DWD.


```{r}
# setup variables

y = 2022
m = 6
p = "/home/marvin/temp"

```



```{r}
# DWD weather data

dwd_data = weather(year = y,
                   month = m,
                   path = p)
terra::plot(dwd_data)

# Topography from package geodata
topo_data = topography(path = p)
terra::plot(topo_data)


# MODIS NDVI
modis_data = modis_single(product = "NDVI", year = y, month = m, path = p)
terra::plot(modis_data)
```


#### Wrapper around all previous functions

```{r}
benchmark = get_smb(year = 2022, month = 6, path = p)
names(benchmark)
```



## Simulated Data


### Random Noise

Method and model development often requires experimental setups with known outcomes. For this, simulated data is often more suitable than real world data.


```{r}
#| layout-nrow: 3
n_uni = noise() # runif is the default
plot(n_uni)
hist(n_uni)

n_norm = noise(rnorm)
plot(n_norm)
hist(n_norm)

n_lnorm = noise(rlnorm)
plot(n_lnorm)
hist(n_lnorm)
```


### Spatial Proxies

Spatial Proxies are ... (see Mila 2024)



```{r}
p_x = spatial_proxy("x")
p_y = spatial_proxy("y")

plot(p_x)
plot(p_y)
```




## Spatial Sampling Designs

```{r}
random_sample = spampling("random", size = 1000, seed = 5)
plot(random_sample[,"cell"])

clustered_sample = spampling("clustered", size = 500, cluster = 10)
plot(germany_outline)
plot(clustered_sample[,"cluster"], add = TRUE)
```


If you give the function the benchmark stack, features at the point location will be extracted.

```{r}
clustered_feature = spampling("clustered", size = 500, cluster = 10, benchmark = benchmark)
head(clustered_feature)
```






## Analysis and Use Cases



## Modelling


```{r}
## TODO
# data(smb) 

library(caret)
library(ranger)
library(ggplot2)
library(tmap)

model = train(NDVI_2022_06 ~ ., data = train_sample,
              method = "ranger",
              num.trees = 100,
              trControl = trainControl(method = "cv"))

model
```








